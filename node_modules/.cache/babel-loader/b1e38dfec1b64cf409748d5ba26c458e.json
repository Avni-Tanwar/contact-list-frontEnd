{"ast":null,"code":"var _jsxFileName = \"/home/asus/Desktop/Contact_list_project/front-end/src/Pages/Redirect/index.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable no-console */\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { withRouter } from 'react-router';\nimport ContactList from '../ContactList';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Redirect = ({\n  history,\n  location,\n  Auth,\n  getLoginTokens\n}) => {\n  _s();\n\n  useEffect(() => {\n    const code = location.search.substring(1).split('&')[0];\n    console.log('code after trim', code.substring(5));\n    console.log('auth', Auth);\n    getLoginTokens(code.substring(5));\n    console.log('history and location', history, location);\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: \"Loading contacts .....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      search: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Redirect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Redirect;\nconst Auth = withRouter(Redirect);\n_c2 = Auth;\nexport default connect(({\n  Auth\n}) => ({\n  Auth\n}), {\n  getLoginTokens: actions.getLoginTokens\n})(Auth);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Redirect\");\n$RefreshReg$(_c2, \"Auth\");","map":{"version":3,"sources":["/home/asus/Desktop/Contact_list_project/front-end/src/Pages/Redirect/index.jsx"],"names":["React","useEffect","withRouter","ContactList","connect","actions","Redirect","history","location","Auth","getLoginTokens","code","search","substring","split","console","log"],"mappings":";;;AAAA;;AACA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,IAArB;AAA2BC,EAAAA;AAA3B,CAAD,KAAiD;AAAA;;AAChET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgBC,SAAhB,CAA0B,CAA1B,EAA6BC,KAA7B,CAAmC,GAAnC,EAAwC,CAAxC,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,IAAI,CAACE,SAAL,CAAe,CAAf,CAA/B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,IAApB;AACAC,IAAAA,cAAc,CAACC,IAAI,CAACE,SAAL,CAAe,CAAf,CAAD,CAAd;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCT,OAApC,EAA6CC,QAA7C;AACH,GANU,EAMR,CAACA,QAAD,CANQ,CAAT;AAQA,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,MAAM,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADA;AAMD,CAfD;;GAAMF,Q;;KAAAA,Q;AAiBN,MAAMG,IAAI,GAAGP,UAAU,CAACI,QAAD,CAAvB;MAAMG,I;AAEN,eAAeL,OAAO,CACpB,CAAC;AAAEK,EAAAA;AAAF,CAAD,MAAe;AACbA,EAAAA;AADa,CAAf,CADoB,EAIpB;AACEC,EAAAA,cAAc,EAAEL,OAAO,CAACK;AAD1B,CAJoB,CAAP,CAObD,IAPa,CAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-console */\n/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { withRouter } from 'react-router';\nimport ContactList from '../ContactList';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/Auth';\n\nconst Redirect = ({ history, location, Auth, getLoginTokens }) => {\n  useEffect(() => {\n    const code = location.search.substring(1).split('&')[0];\n    console.log('code after trim', code.substring(5));\n    console.log('auth', Auth)\n    getLoginTokens(code.substring(5))\n    console.log('history and location', history, location);\n}, [location]);\n\n  return (\n  <>\n    <section>Loading contacts .....</section> \n    <ContactList search={null} />\n  </>\n  );\n};\n\nconst Auth = withRouter(Redirect);\n\nexport default connect(\n  ({ Auth }) => ({\n    Auth,\n  }),\n  {\n    getLoginTokens: actions.getLoginTokens,\n  },\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}